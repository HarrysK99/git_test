
LineTracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000021c  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008dc  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080d  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003df  00000000  00000000  00001419  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000017f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000436  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  00001c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001d0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	cd c0       	rjmp	.+410    	; 0x1a0 <__vector_1>
   6:	00 00       	nop
   8:	f9 c0       	rjmp	.+498    	; 0x1fc <__vector_2>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e1       	ldi	r30, 0x1C	; 28
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	b1 c0       	rjmp	.+354    	; 0x218 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
volatile int direction=STRAIGHT;

int main()
{
	//========기본 세팅========
	EIMSK=0B00000011;
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	89 bf       	out	0x39, r24	; 57
	EICRA=0b00001010;
  bc:	8a e0       	ldi	r24, 0x0A	; 10
  be:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	
	sei();
  c2:	78 94       	sei
	
	DDRA=0XFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a bb       	out	0x1a, r24	; 26
	DDRB=0XFF;
  c8:	87 bb       	out	0x17, r24	; 23
	DDRC=0XFF;
  ca:	84 bb       	out	0x14, r24	; 20
	DDRD=0X00;
  cc:	11 ba       	out	0x11, r1	; 17
	PORTC=(1<<PC7)|(0<<PC6)|(1<<PC5)|(0<<PC4);
  ce:	80 ea       	ldi	r24, 0xA0	; 160
  d0:	85 bb       	out	0x15, r24	; 21
	
	TCCR1A=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11)|(0<<WGM10);
  d2:	82 ea       	ldi	r24, 0xA2	; 162
  d4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM13)|(1<<WGM12)|(0<<CS12)|(0<<CS11)|(1<<CS10);
  d6:	89 e1       	ldi	r24, 0x19	; 25
  d8:	8e bd       	out	0x2e, r24	; 46
	
	ICR1=799;
  da:	8f e1       	ldi	r24, 0x1F	; 31
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	97 bd       	out	0x27, r25	; 39
  e0:	86 bd       	out	0x26, r24	; 38
	OCR1A=400;
  e2:	80 e9       	ldi	r24, 0x90	; 144
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	9b bd       	out	0x2b, r25	; 43
  e8:	8a bd       	out	0x2a, r24	; 42
	OCR1B=400;
  ea:	99 bd       	out	0x29, r25	; 41
  ec:	88 bd       	out	0x28, r24	; 40
			OCR1B=500;
			PORTA=0B00000100;
		}
		else if (direction==RIGHT)
		{
			OCR1A=500;
  ee:	24 ef       	ldi	r18, 0xF4	; 244
  f0:	31 e0       	ldi	r19, 0x01	; 1
			OCR1B+=10;
			PORTA=0B00001000;
  f2:	b8 e0       	ldi	r27, 0x08	; 8
		}	
		else if (direction==LEFT)
		{
			OCR1A+=10;
			OCR1B=500;
			PORTA=0B00000100;
  f4:	a4 e0       	ldi	r26, 0x04	; 4
			OCR1B=500;
			PORTA=0B00000001;
		}
		else if(direction==BACKWARD)
		{
			PORTC=(1<<PC7)|(0<<PC6)|(1<<PC5)|(0<<PC4);
  f6:	70 ea       	ldi	r23, 0xA0	; 160
			OCR1A=500;
			OCR1B=500;
			PORTA=0B00000010;
  f8:	62 e0       	ldi	r22, 0x02	; 2
	//=====================
	while(1)
	{
		if(direction==STRAIGHT)
		{
			PORTC=(0<<PC7)|(1<<PC6)|(0<<PC5)|(1<<PC4);
  fa:	f0 e5       	ldi	r31, 0x50	; 80
			OCR1A=500;
			OCR1B=500;
			PORTA=0B00000001;
  fc:	e1 e0       	ldi	r30, 0x01	; 1
		{
			OCR1A=500;
			OCR1B+=10;
			PORTA=0B00001000;
		}
		if (OCR1A>=600) OCR1A=600;
  fe:	48 e5       	ldi	r20, 0x58	; 88
 100:	52 e0       	ldi	r21, 0x02	; 2
	OCR1A=400;
	OCR1B=400;
	//=====================
	while(1)
	{
		if(direction==STRAIGHT)
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 106:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	39 f4       	brne	.+14     	; 0x11c <main+0x64>
		{
			PORTC=(0<<PC7)|(1<<PC6)|(0<<PC5)|(1<<PC4);
 10e:	f5 bb       	out	0x15, r31	; 21
			OCR1A=500;
 110:	3b bd       	out	0x2b, r19	; 43
 112:	2a bd       	out	0x2a, r18	; 42
			OCR1B=500;
 114:	39 bd       	out	0x29, r19	; 41
 116:	28 bd       	out	0x28, r18	; 40
			PORTA=0B00000001;
 118:	eb bb       	out	0x1b, r30	; 27
 11a:	2a c0       	rjmp	.+84     	; 0x170 <main+0xb8>
		}
		else if(direction==BACKWARD)
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 120:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 124:	89 2b       	or	r24, r25
 126:	39 f4       	brne	.+14     	; 0x136 <main+0x7e>
		{
			PORTC=(1<<PC7)|(0<<PC6)|(1<<PC5)|(0<<PC4);
 128:	75 bb       	out	0x15, r23	; 21
			OCR1A=500;
 12a:	3b bd       	out	0x2b, r19	; 43
 12c:	2a bd       	out	0x2a, r18	; 42
			OCR1B=500;
 12e:	39 bd       	out	0x29, r19	; 41
 130:	28 bd       	out	0x28, r18	; 40
			PORTA=0B00000010;
 132:	6b bb       	out	0x1b, r22	; 27
 134:	1d c0       	rjmp	.+58     	; 0x170 <main+0xb8>
		}	
		else if (direction==LEFT)
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 13a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 13e:	02 97       	sbiw	r24, 0x02	; 2
 140:	49 f4       	brne	.+18     	; 0x154 <main+0x9c>
		{
			OCR1A+=10;
 142:	8a b5       	in	r24, 0x2a	; 42
 144:	9b b5       	in	r25, 0x2b	; 43
 146:	0a 96       	adiw	r24, 0x0a	; 10
 148:	9b bd       	out	0x2b, r25	; 43
 14a:	8a bd       	out	0x2a, r24	; 42
			OCR1B=500;
 14c:	39 bd       	out	0x29, r19	; 41
 14e:	28 bd       	out	0x28, r18	; 40
			PORTA=0B00000100;
 150:	ab bb       	out	0x1b, r26	; 27
 152:	0e c0       	rjmp	.+28     	; 0x170 <main+0xb8>
		}
		else if (direction==RIGHT)
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15c:	03 97       	sbiw	r24, 0x03	; 3
 15e:	41 f4       	brne	.+16     	; 0x170 <main+0xb8>
		{
			OCR1A=500;
 160:	3b bd       	out	0x2b, r19	; 43
 162:	2a bd       	out	0x2a, r18	; 42
			OCR1B+=10;
 164:	88 b5       	in	r24, 0x28	; 40
 166:	99 b5       	in	r25, 0x29	; 41
 168:	0a 96       	adiw	r24, 0x0a	; 10
 16a:	99 bd       	out	0x29, r25	; 41
 16c:	88 bd       	out	0x28, r24	; 40
			PORTA=0B00001000;
 16e:	bb bb       	out	0x1b, r27	; 27
		}
		if (OCR1A>=600) OCR1A=600;
 170:	8a b5       	in	r24, 0x2a	; 42
 172:	9b b5       	in	r25, 0x2b	; 43
 174:	88 35       	cpi	r24, 0x58	; 88
 176:	92 40       	sbci	r25, 0x02	; 2
 178:	10 f0       	brcs	.+4      	; 0x17e <main+0xc6>
 17a:	5b bd       	out	0x2b, r21	; 43
 17c:	4a bd       	out	0x2a, r20	; 42
		if (OCR1B>=600) OCR1B=600;
 17e:	88 b5       	in	r24, 0x28	; 40
 180:	99 b5       	in	r25, 0x29	; 41
 182:	88 35       	cpi	r24, 0x58	; 88
 184:	92 40       	sbci	r25, 0x02	; 2
 186:	10 f0       	brcs	.+4      	; 0x18c <main+0xd4>
 188:	59 bd       	out	0x29, r21	; 41
 18a:	48 bd       	out	0x28, r20	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	91 ee       	ldi	r25, 0xE1	; 225
 190:	c4 e0       	ldi	r28, 0x04	; 4
 192:	81 50       	subi	r24, 0x01	; 1
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	c0 40       	sbci	r28, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0xda>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0xe4>
 19c:	00 00       	nop
 19e:	b1 cf       	rjmp	.-158    	; 0x102 <main+0x4a>

000001a0 <__vector_1>:
		_delay_ms(100);
	}
}

ISR(INT0_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
	if(direction==STRAIGHT) direction=RIGHT;
 1ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	39 f4       	brne	.+14     	; 0x1c8 <__vector_1+0x28>
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1c6:	13 c0       	rjmp	.+38     	; 0x1ee <__vector_1+0x4e>
	else if (direction==RIGHT) direction=LEFT;
 1c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1d0:	03 97       	sbiw	r24, 0x03	; 3
 1d2:	39 f4       	brne	.+14     	; 0x1e2 <__vector_1+0x42>
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <__vector_1+0x4e>
	else direction=STRAIGHT;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}//1000
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__vector_2>:

ISR(INT1_vect)
{
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
	direction=BACKWARD;
 206:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 20a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
